
#include <GLUT/glut.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <algorithm>
#include <iostream>
#include <sstream>

// Tamano inicial de la ventana
GLsizei winWidth =600, winHeight =600;

GLubyte numeros[16] = { '0', '0', '1', '1','2', '2', '3', '3', '4','4',
    '5', '5', '6', '6', '7','7'};
GLubyte expuesta[16] = { false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,};

GLubyte patron[][128] = {
    {0x00,0x06,0x60,0x00,
        0x00,0x06,0xC0,0x00,
        0x00,0x0C,0x80,0x00,
        0x00,0x0C,0xC0,0x00,
        0x00,0x1E,0x40,0x00,
        0x00,0x1A,0x40,0x00,
        0x00,0x12,0x40,0x00,
        0x00,0x23,0xC0,0x00,
        0x00,0x61,0x20,0x00,
        0x00,0xC0,0x20,0x00,
        0x00,0x88,0x20,0x00,
        0x01,0x88,0x20,0x00,
        0x01,0xEC,0x24,0x00,
        0x01,0x96,0x3C,0x00,
        0x03,0x92,0x20,0x00,
        0x03,0x93,0x20,0x00,
        0x03,0x01,0x20,0x00,
        0x02,0x01,0x20,0x00,
        0x02,0x01,0x3E,0x00,
        0x00,0x01,0x00,0x00,
        0x00,0x01,0x3F,0x80,
        0x00,0x01,0x00,0x80,
        0x00,0x02,0x00,0x80,
        0x00,0x02,0x00,0x80,
        0x00,0x02,0x00,0x80,
        0x00,0x02,0x40,0x80,
        0x00,0x03,0x00,0x80,
        0x00,0x01,0x01,0x80,
        0x00,0x01,0xFE,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00},
    {
        
        0x03, 0x80, 0x01, 0xC0,
        0x06, 0xC0, 0x03, 0x60,
        0x03, 0x80, 0x01, 0xC0,
        0x06, 0xC0, 0x03, 0x60,
        0x04, 0x60, 0x06, 0x20,
        0x04, 0x30, 0x0C, 0x20,
        0x04, 0x18, 0x18, 0x20,
        0x04, 0x0C, 0x30, 0x20,
        0x04, 0x06, 0x60, 0x20,
        0x44, 0x03, 0xC0, 0x22,
        0x44, 0x01, 0x80, 0x22,
        0x44, 0x01, 0x80, 0x22,
        0x44, 0x01, 0x80, 0x22,
        0x44, 0x01, 0x80, 0x22,
        0x44, 0x01, 0x80, 0x22,
        0x44, 0x01, 0x80, 0x22,
        0x66, 0x01, 0x80, 0x66,
        0x33, 0x01, 0x80, 0xCC,
        0x19, 0x81, 0x81, 0x98,
        0x0C, 0xC1, 0x83, 0x30,
        0x07, 0xe1, 0x87, 0xe0,
        0x03, 0x3f, 0xfc, 0xc0,
        0x03, 0x31, 0x8c, 0xc0,
        0x03, 0x33, 0xcc, 0xc0,
        0x06, 0x64, 0x26, 0x60, 0x0c, 0xcc, 0x33, 0x30,
        0x18, 0xcc, 0x33, 0x18, 0x10, 0xc4, 0x23, 0x08,
        0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0c, 0x08,
        0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08
    },
    { 0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x07,0x81,0xE0,0x00,
        0x04,0xC3,0x20,0x00,
        0x04,0x7E,0x20,0x00,
        0x06,0x18,0x60,0x00,
        0x02,0x00,0x40,0x00,
        0x03,0x00,0xC0,0x00,
        0x03,0x00,0xC0,0x00,
        0x06,0x24,0x60,0x00,
        0x0C,0x24,0x30,0x00,
        0x08,0x24,0x10,0x00,
        0x08,0x00,0x10,0x00,
        0x0F,0x81,0xF0,0x00,
        0x00,0xC3,0x00,0x00,
        0x00,0x42,0x00,0x00,
        0x00,0x66,0x00,0x00,
        0x00,0x24,0x00,0x00,
        0x00,0x3C,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00},
    
    {
        
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x1E,0x07,0xC1,0xFC,
        0x1E,0x07,0xC1,0xFC,
        0x1E,0x07,0xC1,0xFC,
        0x1E,0x07,0xC1,0xFC,
        0x1E,0x07,0xC1,0xFC,
        0x1E,0x07,0xC1,0xFC,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x07,0xC1,0xE0,
        0x1E,0x3F,0xF9,0xE0,
        0x1E,0x3F,0xF9,0xFC,
        0x1E,0x3F,0xF9,0xFC,
        0x1E,0x3F,0xF9,0xFC,
        0x1E,0x3F,0xF9,0xFC,
        0x1E,0x3F,0xF9,0xFC,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        
        
    },{0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x1F,0xF8,0x7F,0xC0,
        0x1F,0xF8,0x7F,0xC0,
        0x1F,0xF8,0x7F,0xC0,
        0x00,0x38,0x70,0x00,
        0x00,0x38,0x70,0x00,
        0x00,0x38,0x70,0x00,
        0x00,0x38,0x70,0x00,
        0x00,0x38,0x70,0x00,
        0x00,0x38,0x70,0x00,
        0x1F,0xFF,0xFF,0xC0,
        0x1F,0xFF,0xFF,0xC0,
        0x1F,0xFF,0xFF,0xC0,
        0x1F,0xFF,0xFF,0xC0,
        0x1F,0xFF,0xFF,0xC0,
        0x1E,0x00,0x03,0xC0,
        0x1E,0x00,0x03,0xC0,
        0x1E,0x00,0x03,0xC0,
        0x1E,0x38,0x73,0xC0,
        0x1E,0x28,0x53,0xC0,
        0x1E,0x38,0x73,0xC0,
        0x1E,0x00,0x03,0xC0,
        0x1F,0xFF,0xFF,0xC0,
        0x1F,0xFF,0xFF,0xC0,
        0x1F,0xFF,0xFF,0xC0,
        0x1F,0xFF,0xFF,0xC0,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00},
    
    {0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x3F,0xF0,0x00,
        0x00,0x7F,0xF8,0x00,
        0x00,0xFF,0xFC,0x00,
        0x01,0xFF,0xFC,0x00,
        0x03,0xF7,0x7E,0x00,
        0x07,0xE2,0x3F,0x00,
        0x07,0xDD,0x9F,0x80,
        0x07,0xBF,0xFF,0x80,
        0x0F,0xFD,0xFF,0xC0,
        0x0F,0xF8,0xFF,0xC0,
        0x0F,0xF8,0xFF,0xC0,
        0x0F,0xFF,0xFF,0xC0,
        0x0F,0xFF,0xFF,0xC0,
        0x0F,0x87,0x87,0xC0,
        0x0F,0x7B,0x7B,0xC0,
        0x0F,0x7B,0x7B,0xC0,
        0x07,0x6B,0x6B,0xC0,
        0x07,0x7B,0x7B,0x80,
        0x07,0x87,0x87,0x80,
        0x03,0xFF,0xFF,0x00,
        0x01,0xFF,0xFF,0x00,
        0x01,0xFF,0xFE,0x00,
        0x02,0xFF,0xF2,0x00,
        0x04,0xD0,0x59,0x00,
        0x09,0x90,0x5D,0x00,
        0x0B,0x90,0x4E,0x80,
        0x13,0x20,0x26,0x40,
        0x24,0x80,0x00,0x12,
        0x24,0x80,0x01,0x24},
    {0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x03,0xFF,0xFE,0x00,
        0x03,0xFF,0xFE,0x00,
        0x01,0xFF,0xFC,0x00,
        0x00,0xFF,0xF8,0x00,
        0x00,0xFF,0xF8,0x00,
        0x00,0xFF,0xF8,0x00,
        0x00,0xFF,0xF8,0x00,
        0x00,0xC7,0xF8,0x00,
        0x00,0xC7,0xB8,0x00,
        0x00,0xC7,0x18,0x00,
        0x00,0xC7,0xB8,0x00,
        0x00,0xFF,0xF8,0x00,
        0x00,0xFF,0xF8,0x00,
        0x00,0xFF,0xF8,0x00,
        0x00,0xD7,0x58,0x00,
        0x00,0xD7,0x58,0x00,
        0x00,0xFF,0xF8,0x00,
        0x00,0xD7,0x58,0x00,
        0x00,0xD7,0x58,0x00,
        0x00,0xFF,0xF8,0x00,
        0x00,0xFF,0xF8,0x00,
        0x00,0xFF,0xF8,0x00,
        0x00,0xFF,0xF8,0x00,
        0x00,0x7F,0xF0,0x00,
        0x00,0x3F,0xE0,0x00,
        0x00,0x1F,0xC0,0x00,
        0x00,0x0F,0x80,0x00,
        0x00,0x07,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00},
    
    {0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x7E,0x7E,0x00,
        0x00,0x42,0x42,0x00,
        0x00,0x42,0x42,0x00,
        0x01,0xC3,0xC3,0x80,
        0x12,0x42,0x42,0x48,
        0x14,0x42,0x42,0x28,
        0x08,0x7E,0x7E,0x10,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00}
};

int primerEscogido=-1; //si ya ha sido escogido una carta en el turno
int turnos=0;
int correctos = 0;
int actual=-1;
int antepenultimo=-1;

int decimas=0, segundos=0, dsegundos=0, minutos=0;
bool pausa=true;
bool inicio=false;
bool equivoco=false;
bool trampa=false;

void drawText(float x, float y, std::string text, void* font) {
    glRasterPos3f(x, y, 0);
    for (std::string::iterator i = text.begin(); i != text.end(); ++i)
    {
        char c = *i;
        glutBitmapCharacter(font, c);
    }
}

void myTimer(int i) {
    if (correctos<8) {
        if(!pausa){
            decimas++;
            if (decimas>9){
                decimas=0;
                segundos++;
                if (segundos>9) {
                    segundos=0;
                    dsegundos++;
                    if (dsegundos>5) {
                        dsegundos=0;
                        minutos++;
                    }
                }
            }
        }
    }
    glutPostRedisplay();
    glutTimerFunc(100,myTimer,1);
}

std::string toString(int value) {
    std::stringstream ss;
    ss << value;
    return ss.str();
}


void display(){
    
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    if (correctos==8){
        glRasterPos2i(0,0);
        drawText(-500, 0, "Felicidades, lo lograste en ", GLUT_BITMAP_TIMES_ROMAN_24);
        drawText(50, 0, toString(turnos), GLUT_BITMAP_TIMES_ROMAN_24);
        drawText(100, 0, " turnos!", GLUT_BITMAP_TIMES_ROMAN_24);
        pausa=true;
    }
    
    for(int x=0;x<16;x++){
        if(x%2==0){
            glColor3f(.33, .33, 1.0);
        }else{
            glColor3f(.13, .2, .6);
        }
        if (expuesta[x]){
            glColor3f(.5,.9,.1);
            glEnable (GL_POLYGON_STIPPLE);
            glPolygonStipple(patron[numeros[x]-'0' -1]);
            
        }
        if(x<8){
            glRectf(150*x-600, 600, 150*x-450, 400);
            glColor3f(1, 1, 1);
            glRasterPos2f(150*x-575,500);
        } else{
            glRectf(150*(x-8)-600,350 , 150*(x-8)-450, 150);
            glColor3f(1, 1, 1);
            glRasterPos2f(150*(x-8)-575,250);
        }
        if (expuesta[x]) {
            glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, numeros[x]);
        }
        glDisable (GL_POLYGON_STIPPLE);
    }
    
    glColor3ub(0,255,155);
    drawText(-500, -300, toString(minutos) + ":" + toString(dsegundos) + toString(segundos) + ":" + toString(decimas), GLUT_BITMAP_9_BY_15);
    
    drawText(400, -300, "Turnos: " + toString(turnos), GLUT_BITMAP_9_BY_15);
//    
    
    drawText(-500, -400, "Autores: Roberto Mtz y Adrian Rangel", GLUT_BITMAP_HELVETICA_18);
    drawText(-500, -450, "I-Iniciar, P-Pausa, R-Reiniciar, Esc-Salir", GLUT_BITMAP_HELVETICA_18);
    
    if(trampa){
        for (int a=0; a<16; a++){
            if (a<8) {
                glRasterPos2f(150*a-480,550);
                glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_10, numeros[a]);
            }else{
                glRasterPos2f(150*(a-8)-480,300);
                glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_10, numeros[a]);
            }
        }
    }
    
//    glRasterPos2f(-600,.9f);
//    for (int x=0; x<16;x++){
//        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, numeros[x]);
//    }
    glutSwapBuffers();//ya tiene integrado el glFlush
    
}


void myKeyboard(unsigned char theKey, int mouseX, int mouseY)
{
    switch (theKey)
    {
        case 'p':
        case 'P':
            if(inicio){
                pausa=!pausa;
            }
            break;
        case 'i':
        case 'I':
            inicio=true;
            pausa = false;
            std::random_shuffle(&numeros[0], &numeros[16]);
            break;
            
        case 'R':
        case 'r': //resets time to zero
            pausa = true;
            decimas=0, segundos=0, dsegundos=0, minutos=0;
            std::random_shuffle(&numeros[0], &numeros[16]);
            turnos=0;
            correctos=0;
            for (int a=0;a<16;a++){
                expuesta[a]=false;
            }
            break;
        case 'Q':
        case 'q':
        case 27:
            exit(-1);
            //terminate the program
            
        case 'A':
        case 'a':
            if(inicio){
                trampa=!trampa;
            }
            break;
            
            
        default:
            break;		      // do nothing
    }
}


void myMouse(int button, int state, int x, int y)
{
    if (state == GLUT_DOWN)
    {
        //Si el usuario oprime el boton izq del mouse
        if (button == GLUT_LEFT_BUTTON)
        {
            if (!pausa) {
                if (y<=85){
                    if (equivoco){
                        expuesta[actual]=expuesta[antepenultimo]=false;
                        equivoco=false;
                    }
                    actual=(2*x)/150;
                    if(!expuesta[actual]){
                        expuesta[actual]=true;
                        if(primerEscogido==-1){
                            primerEscogido=actual;
                        }else{
                            if (!(numeros[actual]==numeros[primerEscogido])) {
                                equivoco=true;
                                antepenultimo=primerEscogido;
                            }else{
                                correctos++;
                            }
                            primerEscogido=-1;
                            turnos++;
                        }
                    }
                } else if (y<=185){
                    if (equivoco){
                        expuesta[actual]=expuesta[antepenultimo]=false;
                        equivoco=false;
                    }
                    actual=8+(2*x)/150;
                    if(!expuesta[actual]){
                        expuesta[actual]=true;
                        if(primerEscogido==-1){
                            primerEscogido=actual;
                        }else{
                            if (!(numeros[actual]==numeros[primerEscogido])) {
                                equivoco=true;
                                antepenultimo=primerEscogido;
                            }else{
                                correctos++;
                            }
                            primerEscogido=-1;
                            turnos++;
                        }
                        
                    }else{}
                }
            }
            
        }
        else if (button == GLUT_RIGHT_BUTTON)
        {
        }
        std::cout<<x<<" "<<y<<std::endl;
    }
    else
        if (state == GLUT_UP)
        {
            if (button == GLUT_LEFT_BUTTON)
            {
                
            }
            else if (button == GLUT_RIGHT_BUTTON)
            {
            }
        }
}



void init(void)
{
    glClearColor(0,0,0,1.0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(-600,600, -600,600);
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitWindowSize(600,480);
    glutInitWindowPosition(10,10);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE ); //si pones el double tienes que poner glutswapbuffers
    glutCreateWindow("Animacion");
    glutDisplayFunc(display);
    init();
    glutMouseFunc( myMouse );
    glutKeyboardFunc(myKeyboard);
    glutTimerFunc(100,myTimer,1);
    glutMainLoop();
    return EXIT_SUCCESS;
}